<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.itwillbs.de.mes.mapper.RawMaterialStockMapper">
	<select id="getMaterialStockList" resultType="kr.co.itwillbs.de.mes.dto.RawMaterialStockDTO"
									  parameterType="kr.co.itwillbs.de.mes.dto.RawMaterialStockSearchDTO">
		WITH latest_transaction AS (
		    SELECT 
		        wt.material_idx,
		        wt.destination_location,
		        wt.mod_date,
		        wt.mod_id,
		        ROW_NUMBER() OVER (
		            PARTITION BY wt.material_idx, wt.destination_location
		            ORDER BY wt.mod_date DESC
		        ) AS rn
		    FROM t_warehouse_transaction wt
		    WHERE wt.status = 2
		),
		pattern AS (
		SELECT 
		    rm.idx,
		    rm.name,
		    rm.type,
		    ci.minor_name AS type_name,
		    COALESCE(SUM(
		        CASE
                    WHEN wt.status IN (2, 4, 6) AND wt.trans_type IN (1, 4) THEN wt.quantity
                    WHEN wt.status IN (2, 4, 6) AND wt.trans_type IN (2, 3, 5) THEN -wt.quantity
                    ELSE 0
                END
		    ), 0) AS stock,
		    wt.unit,
            ci2.minor_name AS unitName,
		    wt.destination_location AS location,
		    li.name AS location_name,
		    lt.mod_id,
		    lt.mod_date
		FROM t_raw_material rm
		LEFT JOIN t_commoncode_item ci
		    ON rm.type = ci.minor_code
		   AND ci.major_code = 'MATERIAL_TYPE'
		LEFT JOIN t_warehouse_transaction wt
		    ON rm.idx = wt.material_idx
		LEFT JOIN t_location_info li
		    ON wt.destination_location = li.idx
		LEFT JOIN latest_transaction lt
		    ON rm.idx = lt.material_idx
		   AND li.idx = lt.destination_location
		   AND lt.rn = 1
		LEFT JOIN t_commoncode_item ci2
		    ON wt.unit = ci2.minor_code
		   AND ci2.major_code = 'ITEM_UNIT'
		WHERE rm.parents_idx IS NULL
		  AND rm.client_idx IS NULL
			<if test="name != null and !(''.equals(name.trim()))">
				AND rm.name LIKE CONCAT('%', #{name}, '%')
			</if>
			<if test="type != null and !(''.equals(type.trim()))">
				AND rm.type = #{type}
			</if>
			<if test="locationName != null and !(''.equals(locationName.trim()))">
				AND li.name LIKE CONCAT('%', #{locationName}, '%')
			</if>
			<if test="isDeleted != null and !(''.equals(isDeleted.trim()))">
				AND rm.is_deleted = #{isDeleted}
			</if>
		GROUP BY 
		    rm.idx,
		    rm.name,
		    rm.type,
		    ci.minor_name,
		    li.name,
		    lt.mod_date,
		    lt.mod_id
		ORDER BY 
		    rm.idx,
		    li.name
	<include refid="PublicSql.OriginalNumberedPatternByIdForMySql8Bottom" />
	</select>
	
	<select id="searchMaterialStockCount" resultType="int"
									      parameterType="kr.co.itwillbs.de.mes.dto.RawMaterialStockSearchDTO">
		WITH latest_transaction AS (
		    SELECT 
		        wt.material_idx,
		        wt.destination_location,
		        wt.mod_date,
		        wt.mod_id,
		        ROW_NUMBER() OVER (
		            PARTITION BY wt.material_idx, wt.destination_location
		            ORDER BY wt.mod_date DESC
		        ) AS rn
		    FROM t_warehouse_transaction wt
		    WHERE wt.status = 2
		),
		grouped_result AS (
		    SELECT 
		        rm.idx
		    FROM t_raw_material rm
		    LEFT JOIN t_warehouse_transaction wt
		        ON rm.idx = wt.material_idx
		    LEFT JOIN t_location_info li
		        ON wt.destination_location = li.idx
		    LEFT JOIN latest_transaction lt
		        ON rm.idx = lt.material_idx
		        AND li.idx = lt.destination_location
		        AND lt.rn = 1
		    WHERE rm.parents_idx IS NULL
		      AND rm.client_idx IS NULL
				<if test="name != null and !(''.equals(name.trim()))">
					AND rm.name LIKE CONCAT('%', #{name}, '%')
				</if>
				<if test="type != null and !(''.equals(type.trim()))">
					AND rm.type = #{type}
				</if>
				<if test="locationName != null and !(''.equals(locationName.trim()))">
					AND li.name LIKE CONCAT('%', #{locationName}, '%')
				</if>
				<if test="isDeleted != null and !(''.equals(isDeleted.trim()))">
					AND rm.is_deleted = #{isDeleted}
				</if>
		    GROUP BY 
		        rm.idx,
		        li.idx
		)
		SELECT COUNT(*) AS total_count
		FROM grouped_result
	</select>

	<!-- 등록된 레시피를 기준으로 현재 창고에 6개월간 입고된 자재를 파악해 재고를 조회하는 쿼리 -->
	<!-- 레시피 마스터에 넣을려다가 stockMapper가 있어서 일단 여기에 넣기로.. -->
	<!-- 
		수주 => 작업시지 전 레시피를 기준으로 자재조회 => 자재구매신청 => 구매자재 검수장이동 => 검수 => 자재창고입고
		=> 작업지시 => 생산(공정 별 검수) => 완제품 검수 => 완제품 자재창고 입고 => 출고
	-->
	<!--
	WITH latest_transaction AS (
    SELECT 
        wt.idx,
        wt.material_idx,
        wt.destination_location,
        wt.mod_date,
        wt.mod_id,
        ROW_NUMBER() OVER (
            PARTITION BY wt.material_idx, wt.destination_location
            ORDER BY wt.mod_date DESC
        ) AS rn
    FROM t_warehouse_transaction wt
    WHERE wt.status = 2
	),
	
	6개월치 재고 집계
	stock_summary AS (
    SELECT
        rm.idx AS material_idx,
        COALESCE(SUM(
            CASE
                WHEN wt.status = 3 AND wt.trans_type = 1 THEN wt.quantity
                WHEN wt.status IN (3, 4) AND wt.trans_type = 2 THEN -wt.quantity
                ELSE 0
            END
        ), 0) AS stock
    FROM t_raw_material rm
    LEFT
    JOIN t_warehouse_transaction wt
      ON rm.idx = wt.material_idx
      
    WHERE wt.reg_date >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 6 MONTH), '%Y-%m-01')
      AND rm.parents_idx IS NULL
      AND rm.client_idx IS NULL
    GROUP BY rm.idx
	)
	최종 출력: 소요자재 목록 + 실제 필요 수량 + 재고 비교
	SELECT 
    	rma.material_idx,
    	rma.name AS material_name,
    
     환산된 필요 수량 (레시피상 수량 * 작업지시 목표수량 / 배치사이즈)
    ROUND(rma.quantity * (100 / rm.batch_size), 2) AS required_quantity,
    rma.unit,
    
    현재 재고
    COALESCE(ss.stock, 0) AS current_stock,
    
    부족 수량
    ROUND(rma.quantity * (100 / rm.batch_size), 2) - COALESCE(ss.stock, 0) AS shortage,
    
    상태 판단
    CASE
        WHEN COALESCE(ss.stock, 0) < ROUND(rma.quantity * (100 / rm.batch_size), 2) THEN '부족'
        ELSE '충분'
    END AS stock_status
	FROM t_recipe_master rm
	LEFT
	JOIN t_recipe_process_code rp
	  ON rm.idx = rp.master_idx
	  
	LEFT
	JOIN t_recipe_material rma
	  ON rp.idx = rma.process_idx
	  
	LEFT
	JOIN t_raw_material raw
      ON rma.material_idx = raw.idx
	  
	LEFT
	JOIN stock_summary ss
	  ON rma.material_idx = ss.material_idx
	
	해당 레시피 IDX
	WHERE rm.idx = 7  
	  AND rma.name IS NOT NULL
	  AND raw.type IN (1,3) 
	ORDER BY rma.material_idx;
	-->



</mapper>
