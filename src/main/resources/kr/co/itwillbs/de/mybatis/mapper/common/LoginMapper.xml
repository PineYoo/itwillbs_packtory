<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.itwillbs.de.common.mapper.LoginMapper">

	<!-- href: https://mybatis.org/mybatis-3/ko/dynamic-sql.html -->
	<sql id="templates" >
		<![CDATA[]]><!-- Character DATA(CDATA) 는 <![CDATA[문자열]]> 파싱되지 않고 그대로 출력을 위함, 쿼리에서 이스케이프 문자를 사용하지 않기 위해 썼음 -->
		<!-- 예시) 컬럼명 &gt;(&lt;) #{필드명} -> 컬럼명<![CDATA[>(<)]]> #{필드명} -->
		<if test="blabla != null"></if><!-- mybatis가 동적쿼리가 되는 시작 점. -->
		
		<choose><!-- mybatis switch 문 -->
			<when test="bla != null">
			</when>
			<when test="bla != null and blabla != null">
			</when>
			<otherwise>
			</otherwise>
		</choose>
		
		<where></where><!-- where 엘리먼트는 태그에 의해 컨텐츠가 리턴되면 단순히 “WHERE”만을 추가한다. 게다가 컨텐츠가 “AND”나 “OR”로 시작한다면 그 “AND”나 “OR”를 지워버린다. -->
		<trim prefix="WHERE" prefixOverrides="AND |OR "></trim><!-- 위의<where>의 <trim>버전 -->
		
		<set></set><!--  set 엘리먼트는 동적으로 SET 키워드를 붙히고 필요없는 콤마를 제거한다. -->
		<trim prefix="SET" suffixOverrides=","></trim><!-- 위의<set>의 <trim>버전 -->
		
		<foreach item="item" index="index" collection="list" open="(" separator="," close=")" nullable="true">
			#{item}
		</foreach>
		
		<foreach item="item" index="index" collection="list">
			(#{item.index}, #{item.id}, #{item.name}, #{item.isDeleted})
		</foreach>
		<!-- like 문 사용 시
		[MySQL||H2]column LIKE CONCAT('%',#{keyword},'%')
		[Oracle]column LIKE '%'||#{keyword}||'%'
		[MSSQL]column LIKE '%'+#{keyword}+'%'
		 -->
	</sql>
	<sql id="t_member_columns_forSELECT">
		idx,
		member_id,
		password,
		role,
		status,
		is_deleted
	</sql>
	
	<select id="OldgetMemberByUserName" resultType="kr.co.itwillbs.de.common.vo.LoginVO">
		SELECT
			<include refid="t_member_columns_forSELECT" /> 
		FROM t_member
		WHERE is_deleted = 'N'
			AND member_id = #{userName}
	</select>
	
		<sql id="withEmpBase">
		WITH empBase AS (
			SELECT
				emp.id,
				emp.name,
				emp.ssn,
				emp.department_code,
				tdi.department_name,
				emp.sub_department_code,
				tdi.child_name AS sub_department_name,
				emp.position_code,
				tpi.position_code AS position_name,
				tpi.is_manager,
				emp.hire_date,
				emp.resignation_date,
				emp_de.phone_number,
				emp_de.email,
				emp_de.file_idxs,
				emp_de.employee_status_code
			FROM t_employee AS emp
			LEFT JOIN t_employee_detail AS emp_de
				ON emp.id = emp_de.id
			LEFT JOIN (
				SELECT
					tdi.idx,
					tdi.department_code,
					cci.minor_name AS department_name,
					tdi.parent_code,
					tdi.child_code,
					tdi.child_name,
					tdi.rank_number,
					tdi.is_deleted,
					tdi.location_idx
				FROM t_department_info AS tdi
				LEFT JOIN t_commoncode_item AS cci
					ON cci.major_code = 'DEPARTMENT_CODE'
				AND tdi.department_code = cci.minor_code
				) AS tdi
				ON emp.department_code = tdi.department_code
				AND emp.sub_department_code = tdi.child_code
			LEFT JOIN t_position_info AS tpi
				ON emp.position_code = tpi.idx
			)
	</sql>
	
		<select id="getMemberByUserName" resultType="kr.co.itwillbs.de.common.vo.LoginVO">
		<include refid="withEmpBase" />
			SELECT
				emp.*,
				tm.password,
				tm.role,
				tci1.minor_name AS role_name,
				tci1.description AS role_description,
				IFNULL(tm.status,'NOT_YET') AS status,
				tci2.minor_name AS status_name,
				tci2.description AS status_description,
				tm.is_deleted
			FROM empBase AS emp
			LEFT JOIN t_member as tm
				ON emp.id = tm.member_id
			LEFT JOIN t_commoncode_item as tci1
				ON tci1.major_code = 'MEMBER_ROLE'
				AND tm.role = tci1.minor_code
			LEFT JOIN t_commoncode_item as tci2
				ON tci2.major_code = 'MEMBER_STATUS'
				AND tm.status = tci2.minor_code
			<where>
				AND tm.member_id = #{userName}
			</where>
		</select>
</mapper>