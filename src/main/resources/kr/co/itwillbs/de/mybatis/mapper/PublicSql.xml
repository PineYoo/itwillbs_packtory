<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="PublicSql">
	
	<!-- 임시 뷰 방식은 페이징이 간결해진다. -->
	<sql id="withEmpInfo">
		WITH empBase AS (
			SELECT
				te.idx,
				te.id,
				te.name,
				te.ssn,
				te.department_code,
				tdi.department_name,
				te.sub_department_code,
				tdi.child_name AS sub_department_name,
				te.position_code,
				tpi.position_name,
				tpi.is_manager,
				te.hire_date,
				te.work_experience,
				te.is_deleted,
				ted.phone_number,
				ted.email,
				ted.file_idxs,
				ted.employee_status_code
			FROM t_employee AS te
			LEFT JOIN t_employee_detail AS ted
				ON te.id = ted.id
			LEFT JOIN (
					SELECT
						tdi.department_code,
						cci.minor_name AS department_name,
						tdi.parent_code,
						tdi.child_code,
						tdi.child_name,
						tdi.rank_number,
						tdi.is_deleted,
						tdi.location_idx
					FROM t_department_info AS tdi
					LEFT JOIN t_commoncode_item AS cci
						ON cci.major_code = 'DEPARTMENT_CODE'
						AND tdi.department_code = cci.minor_code
					WHERE tdi.is_deleted = 'N'
					) AS tdi ON te.department_code = tdi.department_code
							AND te.sub_department_code = tdi.child_code
			LEFT JOIN (
					SELECT 
						position_code,
						position_name,
						is_manager
					FROM t_position_info
					WHERE is_deleted = 'N'
					) AS tpi ON te.position_code = tpi.position_code
		),
		numberedEmps AS (
			SELECT
				*,
				COUNT(*) OVER () AS total_count,
				ROW_NUMBER() OVER (ORDER BY id) AS row_asc
			FROM empBases
		)
	</sql>
	
	<!-- 임시 뷰 방식은 페이징이 간결해진다. OVER 가 참 예쁘다-->
	<sql id="withWorkerInfo">
		WITH workerBase AS (
			SELECT
				te.idx,
				te.id,
				te.name,
				te.ssn,
				te.department_code,
				tdi.department_name,
				te.sub_department_code,
				tdi.child_name AS sub_department_name,
				te.position_code,
				tpi.position_name,
				tpi.is_manager,
				te.hire_date,
				te.work_experience,
				te.is_deleted,
				ted.phone_number,
				ted.email,
				ted.file_idxs,
				ted.employee_status_code,
				twm.is_supervisor,
				twm.is_lines_manager,
				twm.is_forklift_operator,
				twm.is_driver
			FROM t_employee AS te
			LEFT JOIN t_employee_detail AS ted
				ON te.id = ted.id
			LEFT JOIN (
					SELECT
						tdi.department_code,
						cci.minor_name AS department_name,
						tdi.parent_code,
						tdi.child_code,
						tdi.child_name,
						tdi.rank_number,
						tdi.is_deleted,
						tdi.location_idx
					FROM t_department_info AS tdi
					LEFT JOIN (
							SELECT
								minor_code,
								minor_name
							FROM t_commoncode_item
							WHERE major_code = 'DEPARTMENT_CODE'
								AND is_deleted = 'N'
							) AS cci ON tdi.department_code = cci.minor_code
					WHERE tdi.is_deleted = 'N'
					) AS tdi ON te.department_code = tdi.department_code
							AND te.sub_department_code = tdi.child_code
			LEFT JOIN (
					SELECT 
						position_code,
						position_name,
						is_manager
					FROM t_position_info
					WHERE is_deleted = 'N'
					) AS tpi ON te.position_code = tpi.position_code
			LEFT JOIN (
					SELECT
						employee_id,
						is_supervisor,
						is_lines_manager,
						is_forklift_operator,
						is_driver
					FROM t_worker_metrics
					WHERE is_deleted = 'N'
					) AS twm ON te.id = twm.employee_id
		),
		numberedWorkers AS (
			SELECT
				*,
				COUNT(*) OVER () AS total_count,
				ROW_NUMBER() OVER (ORDER BY id) AS row_asc
			FROM workerBase
		)
	</sql>
	
	<!-- <trim suffixOverrides=","></trim> 으로 감싸진 것이어야 한다 -->
	<sql id="InsertDefineColumns">
		<if test='isDeleted !=null and !("".equals(isDeleted.trim()))'>
		is_deleted,
		</if>
		<if test='regId !=null and !("".equals(regId.trim()))'>
		reg_id,
		reg_date,
		</if>
	</sql>
	
	<!-- <trim suffixOverrides=","></trim> 으로 감싸진 것이어야 한다 -->
	<sql id="InsertValueColumns">
		<if test='isDeleted !=null and !("".equals(isDeleted.trim()))'>
		#{isDeleted},
		</if>
		<if test='regId !=null and !("".equals(regId.trim()))'>
		#{regId},
		now(),
		</if>
	</sql>
	
	<!-- <set></set> 으로 감싸진 것이어야 한다. -->
	<sql id="UpdateSetValueColumns">
		<if test="isDeleted !=null and !(''.equals(isDeleted.trim()))">is_deleted = #{isDeleted},</if>
		<if test="modId !=null and !(''.equals(modId.trim()))">mod_id = #{modId},</if>
		<if test="modId !=null and !(''.equals(modId.trim()))">mod_date = now(),</if>
	</sql>
	
	<sql id="OrderAscPagingTop">
		SELECT *
		FROM (
	</sql>
	
	<sql id="OrderAscPagingBottom">
		) AS a
		WHERE a.rownum <![CDATA[>]]> #{pageDTO.offset}
		LIMIT #{pageDTO.size}
	</sql>
	
	<!-- 리스트 쿼리 조회하듯이 이건 
		include refid="PublicSql.NumberedPatternByIdForMySql8Top"
		
		select foo, bar 
		from table 
		where foo = #{foo} 
			and bar like concat('%',#{bar},'%')
		include refid="PublicSql.NumberedPatternByIdForMySql8Mid"
		
			ROW_NUMBER() OVER (ORDER BY 작업자가 쓰는 seq) AS row_asc
		
		include refid="PublicSql.NumberedPatternByIdForMySql8Bottom"
		 -->
	<sql id="NumberedPatternByIdForMySql8Top">
		WITH pattern AS (
	</sql>
	<sql id="OriginalNumberedPatternByIdForMySql8Bottom">
		),
		numberedPattern AS (
			SELECT
				*,
				COUNT(*) OVER () AS total_count,
				ROW_NUMBER() OVER (ORDER BY employee_id) AS row_asc
			FROM pattern
		)
		SELECT
			(total_count - row_asc + 1) AS rownum,
			*
		FROM numberedPattern
		LIMIT #{pageDTO.size} OFFSET #{pageDTO.offset}
	</sql>
	
	
	<!-- DTO 객체에 rownum(역순번호), rowAsc(정순번호)를 이용해서 화면에 표시가능 -->
	<sql id="NumberedPatternByIdForMySql8Mid">
		),
		numberedPattern AS (
			SELECT
				*,
				COUNT(*) OVER () AS total_count,
	</sql>
	<!-- ROW_NUMBER() OVER (ORDER BY 자기가 쓰는 idx 값) AS row_asc -->
	<sql id="NumberedPatternByIdForMySql8Bottom">
				
			FROM pattern
		)
		SELECT
			(total_count - row_asc + 1) AS rownum,
			*
		FROM numberedPattern
		LIMIT #{pageDTO.size} OFFSET #{pageDTO.offset}
	</sql>
</mapper>