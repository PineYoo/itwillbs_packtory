<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.itwillbs.de.human.mapper.EmployeeMapper">

	<!-- VO/DTO 매핑용 ResultMap -->
	<resultMap id="employeeResultMap" type="kr.co.itwillbs.de.human.dto.EmployeeDTO">
		<id property="idx" column="idx"/>
		<result property="id" column="id"/>
		<result property="name" column="name"/>
		<result property="ssn" column="ssn"/>
		<result property="departmentCode" column="department_code"/>
		<result property="subDepartmentCode" column="sub_department_code"/>
		<result property="positionCode" column="position_code"/>
		<result property="hireDate" column="hire_date"/>
		<result property="resignationDate" column="resignation_date"/>
		<result property="workExperience" column="work_experience"/>
		<result property="regId" column="reg_id"/>
		<result property="regDate" column="reg_date"/>
		<result property="modId" column="mod_id"/>
		<result property="modDate" column="mod_date"/>
	</resultMap>

	<!-- 사원 등록 -->
	<insert id="insertEmployee" parameterType="kr.co.itwillbs.de.human.dto.EmployeeDTO">
	    INSERT INTO t_employee (
	        id, name, ssn,
	        department_code, sub_department_code, position_code,
	        hire_date, resignation_date, work_experience,
	        reg_id, reg_date, is_deleted
	    ) VALUES (
	        #{id}, #{name}, #{ssn},
	        #{departmentCode}, #{subDepartmentCode}, #{positionCode},
	        #{hireDate}, #{resignationDate}, #{workExperience},
	        #{regId}, NOW(), 'N'  <!-- is_deleted는 'N'으로 고정 -->
	    )
	</insert>
	
	<!-- 사원 등록 시 Detail에 사원번호 저장 -->
	<insert id="insertEmployeeDetail" parameterType="string">
		    INSERT INTO t_employee_detail (id)
		    VALUES (#{employeeId})
	</insert>

    <!-- 사원 검색 + 목록 조회 -->
	<select id="searchEmployees" parameterType="kr.co.itwillbs.de.human.dto.EmployeeSearchDTO" resultMap="employeeResultMap">
	    SELECT * FROM t_employee
	    WHERE is_deleted = 'N'
	    <if test="name != null and name != ''">
	        AND name LIKE CONCAT('%', #{name}, '%')
	    </if>
	    <if test="departmentCode != null and departmentCode != ''">
	        AND department_code = #{departmentCode}
	    </if>
	    <if test="subDepartmentCode != null and subDepartmentCode != ''">
	        AND sub_department_code = #{subDepartmentCode}
	    </if>
	    <if test="positionCode != null and positionCode != ''">
	        AND position_code = #{positionCode}
	    </if>
	    <if test="hireDateFrom != null">
    		AND hire_date &gt;= #{hireDateFrom}
		</if>
		<if test="hireDateTo != null">
		    AND hire_date &lt;= #{hireDateTo}
		</if>
		<if test="resignationDateFrom != null">
		    AND resignation_date &gt;= #{resignationDateFrom}
		</if>
		<if test="resignationDateTo != null">
		    AND resignation_date &lt;= #{resignationDateTo}
		</if>
	    ORDER BY reg_date DESC
	</select>

    <!-- 사원 단건 조회 -->
    <select id="getEmployeeById" parameterType="String" resultMap="employeeResultMap">
        SELECT * FROM t_employee
        WHERE id = #{id} AND is_deleted = 'N'
    </select>

    <!-- 사원 정보 수정 -->
    <update id="updateEmployee" parameterType="EmployeeDTO">
	    UPDATE t_employee SET
	        department_code = #{departmentCode},
	        sub_department_code = #{subDepartmentCode},
	        position_code = #{positionCode},
	        resignation_date = #{resignationDate},
	        work_experience = #{workExperience},
	        mod_id = #{modId},
	        mod_date = NOW()
	    WHERE id = #{id} AND is_deleted = 'N'
	</update>

    <!-- 사원 삭제 (Soft Delete) -->
    <update id="deleteEmployee" parameterType="string">
        UPDATE t_employee SET
            is_deleted = 'Y',
            mod_date = NOW()
        WHERE id = #{id}
    </update>
    
</mapper>
